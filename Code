import pandas as pd
import tensorflow as tf
import numpy as np
from matplotlib import pyplot as plt
def build_model(my_learning_rate):

  model = tf.keras.models.Sequential()


  model.add(tf.keras.layers.Dense(units=1, 
                                  input_shape=(1,)))

  model.compile(optimizer=tf.keras.optimizers.RMSprop(lr=my_learning_rate),
                loss="mean_squared_error",
                metrics=[tf.keras.metrics.RootMeanSquaredError()])
  return model           


def train_model(model, feature, label, epochs, batch_size):

  history = model.fit(x=feature,
                      y=label,
                      batch_size=batch_size,
                      epochs=epochs)
  trained_weight = model.get_weights()[0]
  trained_bias = model.get_weights()[1]

  epochs = history.epoch

  hist = pd.DataFrame(history.history)

  rmse = hist["root_mean_squared_error"]

  return trained_weight, trained_bias, epochs, rmse

#print("Defined create_model and train_model")
data_file=pd.read_csv(filepath_or_buffer="https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv")
my_feature=data_file.loc[:,"Hours"]
my_label=data_file.loc[:"Scores"]
epochs=1000
my_batch_size=5
learning_rate=0.05
my_model=build_model(learning_rate)
trained_weight,trained_bias,epochs,rmse=train_model(my_model,my_feature,my_label,epochs,my_batch_size)
x=np.array([9.5])
ans=my_model.predict_on_batch(x)
print("Prediction is:",ans[0])
